This file attempts to document all differences between FF1 and FFC, so that you don't mess things up by
strictly following Documentation.txt.


The biggest difference, of course, is that all the text of FF1 is smooshed together in the file text/japanese.
This does mean that editing text is a bit more annoying, since there are so many chunks to scroll through.
However, liberal use of the search feature should alleviate that issue.


For whatever reason, vivosaur chunks have 12 extra bytes of padding at the beginning: two for their ID, then
literally just ten 00's. Thus a vivosaur's element is now at 0x0D. However, that's not all! Right after the
element are two bytes that are, for some unknown reason, equal to that vivosaur's Rank 12 LP divided by 2.
You will want to change these if you go changing a vivosaur's LP amounts. Unfortunately, I cannot just
say to add 14 to all of the offsets, things are just weird enough that I'm better off just listing everything
out:
- 0x0D: Element
- 0x0E-0x0F: Max LP / 2
- 0x10-0x1F: Stats, in the usual growth rate, min, max format
- 0x20-0x21: Crit Rate (still the same byte twice)
- 0x22: Link Chance
- 0x24-0x27: Team Compatibility (still in binary, but only the first 16 bytes are used in vanilla)
- 0x30-0x33: Team Skill ID
- 0x34-0x35: The skill used for Link. Unlike FFC, the entire attack animation process is not skipped
  for Link, so a move the vivosaur has not animtion for puts the camera in a wonky spot for a bit and then
  it goes to healthbar dropping
- 0x61: Ability Type
- 0x62: Ability Value (both match up exactly with the original tables, other than most not existing)
- 0x6C: The multiplier for damage from/to the SZ. Unusually, you have to divide by 100 to get the multiplier,
  not 10. Thus, for example, the normal value is 0x32 -> 50 -> 0.5
- 0x8C-0x9B: Normal skill IDs (note that they are four bytes each, instead of FFC's two)
- 0x9C-0xAB: 1, 2, 3, 4. Since these are a full four bytes each, I assume this is how many parts you need to
  know each move
- 0xAC-0xB3: Support effects. FF1 has a way more logical system, where the first four bytes are for ally AZ,
  and the second four bytes are for enemy AZ. Again, the stats go in order (Attack, Defense, Accuracy, and
  Evasion), and large numbers mean they're actually negative (use 256 - it)
- 0xB4-0xBD: For some reason, despite this only mattering for Dinomaton and Frigi/Igno, they felt the need to
  add ten bytes to every single vivosaur representing the percent change to get a status. It goes in the order
  of the primary effects table below, but of course starting from Poison. Thus whereas most vivosaurs have all
  64's here (i.e. if a status affliction chance succeeds they will always get it), Dinomoton has 00
  everywhere except the fifth one, and the fifth non-nothing entry of the table is in fact Confusion. 
- 0xC0-0xC3: Another set of 1, 2, 3, 4, presumably for the moves' ordering
- 0xC4-0xD8: The LP of the vivosaur at each of the 12 levels

As is tradition for Fossil Fighters, we have way too many other things you need to change to change the
number of moves a vivosaur has:
- 0x28: number of moves
- 0x38: number of moves
- 0x3C: location of beginning of first 1, 2, 3, 4 (the long one) in the chunk
- 0x54: location of first ally support effect (A4 for 3-movers, AC for 4-movers)
- 0x58: location of first enemy support effect
- 0x68: location of beginning of status chances
- 0x74: number of moves
- 0x78: location of beginning of second 1, 2, 3, 4 (the short one)

IMPORTANT: Vivosaurs with three moves (e.g. Zino) are literally missing the four bytes of ID and of
parts requirement for their fourth move (however, the ordering section just has a 00 there). Thus, you
will need to shift back all the offsets accordingly, e.g. the LP data starts at 0xBC.

Due to not being mechanically significant (unlike their counterparts in FFC), a vivosaur's Class and Diet
are not definied within these chunks.


Move chunks are also a good bit larger than their FFC counterparts, and things are moved around for no good
reason. Again, it's easier to just tell you where everything is:
- 0x1C: Whether a move is counterable (again, 03 if yes, 00 if no)
- 0x20-0x27: FP, Base Damage, FP, Base Damage (sometimes only one of each)
- 0x28: Primary Effect
- 0x29: Primary Percent
- 0x2A: Primary Turn Count
- 0x2B: Primary Icon
- 0x2C: Primary Value 1
- 0x2D: Primary Value 2
- 0x30: Secondary Effect
- 0x31: Secondary Percent
- 0x32-0x33: Secondary Value (nothing in-between)
- If this is a transforming move, you then have one byte of "number of vivosaur's you can transform into,"
  then 00 00 00 0C 00 00 00, then the vivosaur IDs you can transform into (still one byte each), and then
  some number of 00's

For non-transforming moves that end after 0x3B, things may be shifted around, and not always cleanly. As
always, vanilla values are all known and can be searched for.

With regards to the effects tables, the secondary effects all line up perfectly. However, as you saw, the
primary effects seem to work very differently. Here is the table of effects:
- 01: nothing
- 02: Poison
- 03: Sleep
- 04: Scare
- 05: Excite
- 06: Confusion
- 07: Enrage
- 08: Counter
- 09: Enflame
- 0A: Harden
- 0B: Quicken

The icons go in order, with Normal Poison being 02, then Gold Poison being 03, then Normal Sleep being
04, etc. Nothing moves have a turn count of 00, and an icon of 01.

Regarding Primary Values, we have another table, corresponding to the first:
- Nothing: 01 00
- Poison: Percent of max LP damaged, then 00
- Sleep: 00 00
- Scare: Number of moves made unusable, then 00
- Excite: 00 00
- Confusion: 00 00
- Enrage: Amount Attack is raised, then amount Accuracy is lowered
- Counter: Percent chance a move will be countered, then 00
- Enflame: Amount Attack is raised, then amount Defense is lowered
- Harden: Amount Defense is raised, then 00
- Quicken: Amount Evasion is raised, then 00


Hiding down here again is etc/btl_kp_defs. The file structure is broadly the same, except the level data
goes from one row's 0x?C to the 0x?4 of the second row after that one, or from a 0x?4 to a 0x?C. That is
to say, each piece of level data is 23 bytes long. Again, it goes recharge, max, recharge, starting from
the 13th byte of a level all the way up to the end.